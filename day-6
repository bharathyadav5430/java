Java Encapsulation 
 
Java Package 
A java package is a group of similar types of classes, interfaces and subpackages. 
Package in java can be categorized in two form, built-in package and userdefined package. 
There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, SQL etc. 
Sub package in java 
Package inside the package is called the sub package. It should be created to categorize the package further. 
Access Modifiers in Java 
There are two types of modifiers in Java: access modifiers and non-access modifiers. 
There are four types of Java access modifiers: 
1.	Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class. 
2.	Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default. 
3.	Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package. 
4.	Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package. 
			 	
Access Modifier 	within  class 	within                    outside package 
                                  by subclass only 
package 		outside package 
				
Private 	Y 	N 	N 	N 	
Default 	Y 	Y 	N 	N 	
Protected 	Y 	Y 	Y 	N 	
Public 	Y 	Y 	Y 	Y 	
 
Encapsulation in Java 
Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines. 
Advantage of Encapsulation in Java 
By providing only a setter or getter method, you can make the class readonly or write-only. In other words, you can skip the getter or setter methods. 
It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method.  
It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members. 
