Java OOPs Misc.

Object class in Java

The Object class is the parent class of all the classes in java by default. In 

other words, it is the topmost class of java.

The Object class is beneficial if you want to refer any object whose type you 

don't know. Notice that parent class reference variable can refer the child 

class object, know as upcasting.

1. Object obj=getObject();//we don't know what object will be returned from t

his method 

Object Cloning in Java

The object cloning is a way to create exact copy of an object. The clone() 

method of Object class is used to clone an object.

The java.lang.Cloneable interface must be implemented by the class whose 

object clone we want to create. If we don't implement Cloneable interface, 

clone() method generates CloneNotSupportedException.

Why use clone() method ?

The clone() method saves the extra processing task for creating the exact 

copy of an object. If we perform it by using the new keyword, it will take a 

lot of processing time to be performed that is why we use object cloning.
Advantage of Object cloning
o You don't need to write lengthy and repetitive codes. Just use an 
abstract class with a 4- or 5-line long clone() method.
o It is the easiest and most efficient way for copying objects, especially 
if we are applying it to an already developed or an old project.
o Clone() is the fastest way to copy array.
Disadvantage of Object cloning
o To use the Object.clone() method, we have to change a lot of syntaxes 
to our code, like implementing a Cloneable interface, defining the 
clone() method and handling CloneNotSupportedException, and 
finally, calling Object.clone() etc.
o We have to implement cloneable interface while it doesn't have any 
methods in it.
Java Math class
Java Math class provides several methods to work on math calculations like 
min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc.
Unlike some of the Strict Math class numeric methods, all implementations 
of the equivalent function of Math class can't define to return the bit-for-bit 
same results.
Wrapper classes in Java
The wrapper class in Java provides the mechanism to convert primitive 
into object and object into primitive.
Since J2SE 5.0, autoboxing and unboxing feature convert primitives into 
objects and objects into primitives automatically. The automatic conversion 
of primitive into an object is known as autoboxing and vice-versa unboxing.
Autoboxing
The automatic conversion of primitive data type into its corresponding 
wrapper class is known as autoboxing, for example, byte to Byte, char to 
Character, int to Integer, long to Long, float to Float, boolean to Boolean, 
double to Double, and short to Short.
Unboxing
The automatic conversion of wrapper type into its corresponding primitive 
type is known as unboxing. It is the reverse process of autoboxing.
Java Strictfp Keyword
Java strictfp keyword ensures that you will get the same result on every 
platform if you perform operations in the floating-point variable.
Difference between object and class
No. Object Class
1) Object is an instance of a class.
Class is a blueprint or template from 
which objects are created.
2) Object is a real world entity such as pen, 
laptop, mobile, bed, keyboard, mouse, chair 
etc.
Class is a group of similar objects.
3) Object is a physical entity.
Class is a logical entity.
4) Object is created through new 
keyword mainly e.g.
Student s1=new Student();
Class is declared using class 
keyword e.g.
class Student{}
5) Object is created many times as per 
requirement.
Class is declared once.
6) Object allocates memory when it is 
created.
Class doesn't allocated memory 
when it is created.
7) There are many ways to create object in 
java such as new keyword, newInstance() 
method, clone() method, factory method 
and deserialization.
There is only one way to define 
class in 
Difference between method overloading and method 
overriding in java
No. Method Overloading
Method Overriding
1)
Method overloading is used to 
increase the readability of the 
program.
Method overriding is used to provide 
the specific implementation of the 
method that is already provided by 
its super class.
2)
Method overloading is 
performed within class.
Method overriding occurs in two 
classes that have IS-A (inheritance) 
relationship.
3)
In case of method 
overloading, parameter must be 
different.
In case of method 
overriding, parameter must be same.
4)
Method overloading is the 
example of compile time 
polymorphism.
Method overriding is the example 
of run time polymorphism.
5)
In java, method overloading 
can't be performed by changing 
return type of the method 
only. Return type can be same or 
different in method overloading. 
But you must have to change the 
parameter.
Return type must be same or 
covariant in method overriding.
