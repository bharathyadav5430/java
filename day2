Java Object Class 
 
Java OOPs Concepts 
Object-Oriented Programming is a paradigm that provides many concepts, such as inheritance, data binding, polymorphism, etc. Object 
Any entity that has state and behaviour is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical. 
  Class 
    Collection of objects is called class. It is a logical entity. 
    Inheritance 
   When one object acquires all the properties and behaviours of a parent object, it is known as inheritance. It provides code reusability. 
  Polymorphism 
If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc. 
Abstraction 
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing. 
Encapsulation 
Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines. 
Coupling 
Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other.  
Cohesion 
Cohesion refers to the level of a component which performs a single welldefined task. A single well-defined task is done by a highly cohesive method.  
Association 
Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. 
Aggregation 
Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state.  
Composition 
The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. 
Constructors in Java 
In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory. 
Constructor Overloading in Java 
Constructor overloading in Java is a technique of having more than one constructor with different parameter lists.  
 
Singleton design pattern in Java 
Singleton Pattern says that just "define a class that has only one instance and provides a global point of access to it". 
In other words, a class must ensure that only single instance should be created and single object can be used by all other classes. 
There are two forms of singleton design pattern o Early Instantiation: creation of instance at load time. 
o Lazy Instantiation: creation of instance when required. 
 
Advantage of Singleton design pattern o Saves memory because object is not created at each request. Only single instance is reused again and again. 
Private Constructor in Java 
Java allows us to declare a constructor as private. We can declare a constructor private by using the private access specifier. Note that if a constructor is declared private, we are not able to create an object of the class. Instead, we can use this private constructor in Singleton Design Pattern. 
Rules for Private Constructor 
The following rules keep in mind while dealing with private constructors. 
o	It does not allow a class to be sub-classed. o It does not allow to create an object outside the class. 
o	If a class has a private constructor and when we try to extend the class, a compile-time error occurs. 
o	We cannot access a private constructor from any other class. o If all the constant methods are there in our class, we can use a private constructor. 
Use Cases of Private Constructor 
The main purpose of using a private constructor is to restrict object creation. We also use private constructors to implement the singleton design pattern. The use-cases of the private constructor are as follows: 
o It can be used with static members-only classes. o It can be used with static utility or constant classes. o It can also be used to create singleton classes. o It can be used to assign a name, for instance, creation by utilizing factory methods. o It is also used to avoid sub-classing. 
Different b/w Constructor and Method 
 
  
Java static keyword 
The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class. 
1) Java static variable 
If you declare any variable as static, it is known as a static variable. o The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc. 
 
o The static variable gets memory only once in the class area at the time of class loading. 
2) Java static method 
If you apply static keyword with any method, it is known as static method. o A static method belongs to the class rather than the object of a class. o A static method can be invoked without the need for creating an instance of a class. o A static method can access static data member and can change the value of it. 
Q) Why is the Java main method static? 
Ans) It is because the object is not required to call a static method. If it were a non-static method, JVM creates an object first then call main() method that will lead the problem of extra memory allocation. 
3) Java static block o Is used to initialize the static data member. o It is executed before the main method at the time of classloading. 
Q) Can we execute a program without main() method? 
Ans) No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the main method. 
this keyword in Java 
There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object. 
  
 
 
Inheritance in Java 
Inheritance in Java is a mechanism in which one object acquires all the properties and behaviours of a parent object. 
Inheritance represents the IS-A relationship which is also known as a parent-child relationship. 
Why use inheritance in java o For Method Overriding (so runtime polymorphism can be achieved). 
o For Code Reusability. 
Types of inheritance in java 
On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical. 1) Single Inheritance 
When a class inherits another class, it is known as a single inheritance.  
     2)Multilevel Inheritance Example 
When there is a chain of inheritance, it is known as multilevel inheritance.  
    3)Hierarchical Inheritance Example 
When two or more classes inherits a single class, it is known as hierarchical inheritance.  
Q) Why multiple inheritance is not supported in java? 
To reduce the complexity and simplify the language, multiple inheritance is not supported in java. 
Aggregation in Java 
If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship. 
Method Overloading in Java 
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading. 
If we have to perform only one operation, having same name of the methods increases the readability of the program. 
Q) Why Method Overloading is not possible by changing the return type of method only? 
In java, method overloading is not possible by changing the return type of the method only because of ambiguity.  
Q) Can we overload java main() method? 
Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. 
