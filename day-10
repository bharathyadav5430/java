Exception Handling 
 
Exception Handling in Java 
The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that the normal flow of the application can be maintained. 
What is Exception in Java? 
 
an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime. 
Types of Java Exceptions 
There are mainly two types of exceptions: checked and unchecked. An error is considered as the unchecked exception. However, according to Oracle, there are three types of exceptions namely: 
1.	Checked Exception 
2.	Unchecked Exception 
3.	Error 
Difference 	between 	Checked 	and 	Unchecked Exceptions 
1) Checked Exception 
The classes that directly inherit the Throwable class except Runtime 
Exception and Error are known as checked exceptions. For example, IO Exception, SQL Exception, etc. Checked exceptions are checked at compiletime. 
2) Unchecked Exception 
The classes that inherit the Runtime Exception are known as unchecked exceptions. For example, Arithmetic Exception, NullPointerException, ArrayIndexOutOfBoundsException, etc. Unchecked exceptions are not checked at compile-time, but they are checked at runtime. 
3) Error 
Error is irrecoverable. Some example of errors are OutOfMemoryError, VirtualMachineError, AssertionError etc. 
Java try-catch block 
Java try block 
Java try block is used to enclose the code that might throw an exception. It must be used within the method. 
Syntax of Java try-catch 
try{     
//code that may throw an exception     
}catch(Exception_class_Name ref){}   
 
Java catch block 
Java catch block is used to handle the Exception by declaring the type of exception within the parameter. 
The catch block must be used after the try block only. You can use multiple catch block with a single try block.   
 
Java Catch Multiple Exceptions Java Multi-catch block 
A try block can be followed by one or more catch blocks. Each catch block must contain a different exception handler. So, if you have to perform different tasks at the occurrence of different exceptions, use java multi-catch block. 
Java Nested try block 
In Java, using a try block inside another try block is permitted. It is called as nested try block.  
Why use nested try block 
Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error. In such cases, exception handlers have to be nested. 
Java finally block 
Java finally block is a block used to execute important code such as closing the connection, etc. 
Java finally block is always executed whether an exception is handled or not.  
Why use Java finally block? 
o finally block in Java can be used to put "cleanup" code such as closing a file, closing connection, etc. o The important statements to be printed can be placed in the finally block. 
Usage of Java finally 
Let's see the different cases where Java finally block can be used. 
Java throw keyword 
 
The Java throw keyword is used to throw an exception explicitly. 
We can throw either checked or unchecked exceptions in Java by throw keyword. It is mainly used to throw a custom exception. 
 
Java Exception Propagation 
Exception propagation in Java occurs when an exception thrown from the top of the stack.  
Java throws keyword 
The Java throws keyword is used to declare an exception. It gives an information to the programmer that there may occur an exception.  
Syntax of Java throws 
return_type method_name() throws exception_class_name{   
//method code   
}   
 
Difference between throw and throws in Java 
 
  
 
 
Difference between final, finally and finalize 
  
 
Java Custom Exception 
Creating our own Exception is known as custom exception or user-defined exception. Basically, Java custom exceptions are used to customize the exception according to user need. 
Why use custom exceptions? 
Java exceptions cover almost all the general type of exceptions that may occur in the programming. 
However, we sometimes need to create custom exceptions. 
 
 
 
